import{_ as e,o as t,c as s,a as l}from"./app.663855b7.js";const f=JSON.parse('{"title":"Design","description":"","frontmatter":{},"headers":[{"level":2,"title":"Parsing","slug":"parsing"},{"level":3,"title":"Hyper parsers","slug":"hyper-parsers"},{"level":3,"title":"Tokens","slug":"tokens"},{"level":3,"title":"Properties and the whole structure","slug":"properties-and-the-whole-structure"},{"level":2,"title":"Applying rules","slug":"applying-rules"},{"level":3,"title":"Options","slug":"options"},{"level":3,"title":"Implementation","slug":"implementation"},{"level":2,"title":"Joining and returning","slug":"joining-and-returning"},{"level":2,"title":"Reports","slug":"reports"},{"level":2,"title":"For dev","slug":"for-dev"}],"relativePath":"design.md"}'),o={name:"design.md"},n=l(`<h1 id="design" tabindex="-1">Design <a class="header-anchor" href="#design" aria-hidden="true">#</a></h1><p>The whole process could be mainly divided into several parts:</p><ol><li>parse text into tokens</li><li>apply rules to tokens</li><li>join tokens as the final string</li><li>output the string and warnings</li></ol><h2 id="parsing" tabindex="-1">Parsing <a class="header-anchor" href="#parsing" aria-hidden="true">#</a></h2><p>The parsing process is aimed to convert a string in natural language (Chinese, sometimes mixed with English) into a certain structure, which is convenient to analysze and tweak.</p><h3 id="hyper-parsers" tabindex="-1">Hyper parsers <a class="header-anchor" href="#hyper-parsers" aria-hidden="true">#</a></h3><p>To support morden text formats like HTML, Markdown, etc., we need to integrate their parsers ahead. Also, we extend some other flags/marks to customize the process a little. These formats/flags/marks are:</p><ul><li>Markdown/HTML tags: <ul><li>Block wrappers like paragraphs, headings, blockquotes, etc.</li><li>Block content like code blocks.</li><li>Inline wrappers like bolds, italics, links, etc.</li><li>Inline content like images, code, etc.</li></ul></li><li>Config flag as a HTML comment: <ul><li>Ignore all the content: e.g. <code>&lt;!-- zhlint disabled --&gt;</code>.</li><li>Ignore some special cases: e.g. <code>&lt;!-- zhlint ignore: prefix-,start,end,-suffix --&gt;</code>.</li></ul></li><li>Hexo tags: e.g. <code>{% gist gist_id [filename] %}</code>.</li><li>markdown-it-container (VuePress custom containers): e.g. <code>::: warning\\n*here be dragons*\\n:::</code>.</li></ul><p>After that, an input string would be parsed into a string with several <em>slots</em>. For each slot, it can hold a piece of <em>plain text content</em> to process further.</p><h3 id="tokens" tabindex="-1">Tokens <a class="header-anchor" href="#tokens" aria-hidden="true">#</a></h3><p>We can parse a piece of <em>plain text content</em> into structured tokens:</p><ul><li><strong>Groups</strong>: Usually the content wrapped by a pair of quotes. The quotes should always be paired, which means every left quote should technically have a paired right quote accordingly. A piece of <em>plain text content</em> actually composes several nested groups. So the groups determine the whole structure of the <em>plain text content</em>.</li><li><strong>Marks</strong>: Usually a pair of brackets, not the content they wrap. The brackets should always be paired, which means every left bracket should technically have a paired right bracket accordingly. We don&#39;t track the nested structure of brackets since in real world the usage of brackets are very flexible, like a hyper format. So we just track their positions without structures.</li><li><strong>Letters</strong>: Have 2 types: half-width (English) and full-width (Chinese). Concequtive half-width letters or concequtive full-width letters can be considered as one token.</li><li><strong>Punctuations</strong>: Except quotes and brackets, have 2 types: half-width and full-width.</li><li><strong>Hyper wrappers</strong>: e.g. inline wrappers like bolds, italics, links, etc. including pairs of HTML tags.</li><li><strong>Hyper content</strong>: e.g. inline content like images, code, etc. including self-closed HTML tags.</li><li><strong>Spaces</strong>.</li></ul><p><strong>Parsing options</strong></p><ul><li><code>noSinglePair: true | undefined = true</code>: with this option on, the parser will report if there is any unpaired quotes or brackets.</li><li>Additionally, there is no option for that, however, for a better analysis further, the parser will treat single quotes as a letter when it&#39;s between English letters without spaces (<em>as a shorthand</em>) e.g. <code>what&#39;s up</code>.</li></ul><p><strong>Simplified token types</strong></p><p>To simplify the structure, <em>we remove spaces from token types</em> as a property to other tokens, since the modifications of them are always related to their tokens besides.</p><ul><li>For each group token, we add <code>innerSpaceBefore</code> and <code>spaceAfter</code> properties. Any of them could be an empty string or spaces.</li><li>For other tokens, we only add <code>spaceAfter</code>. It could be an empty string or spaces.</li></ul><p>So eventually, token have these types:</p><ul><li><code>LETTERS_HALF</code></li><li><code>LETTERS_FULL</code></li><li><code>PUNCTUATION_HALF</code></li><li><code>PUNCTUATION_FULL</code></li><li><code>HYPER_WRAPPER</code></li><li><code>HYPER_WRAPPER_BRACKET</code></li><li><code>HYPER_CONTENT</code></li><li><code>HYPER_CONTENT_CODE</code></li><li><code>GROUP</code></li><li><code>UNMATCHED</code></li><li><code>UNKNOWN</code></li></ul><h3 id="properties-and-the-whole-structure" tabindex="-1">Properties and the whole structure <a class="header-anchor" href="#properties-and-the-whole-structure" aria-hidden="true">#</a></h3><p>Each token has these properties:</p><ul><li><code>index</code></li><li><code>length</code></li><li><code>content</code></li><li><code>spaceAfter</code></li><li>For groups only: <ul><li><code>startIndex</code></li><li><code>startContent</code></li><li><code>endIndex</code></li><li><code>endContent</code></li><li><code>innerSpaceBefore</code></li></ul></li></ul><p>The whole structure of a piece of <em>plain text content</em> could be parsed as:</p><ul><li><code>tokens</code>: all the content as a group without quotes</li><li><code>groups</code>: all groups collected</li><li><code>marks</code>: all brackets and wrappers collected</li></ul><p>Additionally, for further better analysis and modifications, we add these into properties:</p><ul><li><code>modifiedType</code></li><li><code>modifiedContent</code></li><li><code>modifiedSpaceAfter</code></li><li><code>modifiedStartContent</code> (groups only)</li><li><code>modifiedEndContent</code> (groups only)</li><li><code>modifiedInnerSpaceBeore</code> (groups only)</li><li><code>mark</code> and <code>markSide</code> (brackets and wrappers only)</li><li><code>validations</code></li></ul><p>and <code>errors</code> into the whole structure (during this phrase, we only detect unmatched quotes and brackets).</p><h2 id="applying-rules" tabindex="-1">Applying rules <a class="header-anchor" href="#applying-rules" aria-hidden="true">#</a></h2><p>The main jobs we are supposed to do through these rules are:</p><ul><li>Tweaking the width/choices of punctuations/brackets/quotes.</li><li>Tweaking spaces around tokens.</li></ul><p>What we do is separating the job into separated rules, and for each rule, we traverse all the tokens one-by-one and run a function:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Handler</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">token</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> group</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>
<span class="line"></span></code></pre></div><p>At the same time, we provide several options to trigger the rules. So to write a rule, you need to specify a function:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Options</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Handler</span></span>
<span class="line"></span></code></pre></div><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-hidden="true">#</a></h3><p>We are figuring out all the requirements by several options below:</p><p><strong>For the whole string</strong></p><ul><li><code>trimSpace</code><ul><li>Type: <code>true | undefined</code></li><li>Default: <code>true</code></li><li>This rule is triming spaces of the whole string.</li></ul></li></ul><p><strong>For hyper wrappers</strong></p><ul><li><code>noSpaceInsideWrapper</code><ul><li>Type: <code>true | undefined</code></li><li>Default: <code>true</code></li><li>This rule is to ensure all the existing spaces should be outside hyper wrappers like <code>*</code>, <code>_</code>, <code>[</code>, <code>]</code>, etc.</li><li>Examples: <ul><li><code>x _ ** yyy ** _ z</code> should be <code>x _**yyy**_ z</code></li></ul></li></ul></li></ul><p><strong>For the width/choices of punctuations/brackets/quotes</strong></p><ul><li><code>halfWidthPunctuation: string? = \`()\` </code></li><li><code>fullWidthPunctuation: string? = \`\uFF0C\u3002\uFF1A\uFF1B\uFF1F\uFF01\u201C\u201D\u2018\u2019\` </code></li><li><code>adjustedFullWidthPunctuation: string? = \`\u201C\u201D\u2018\u2019\`</code></li><li><code>unifiedPunctuation: &quot;simplified&quot; (default) | &quot;traditional&quot; | undefined</code></li></ul><p>These options can format and determine punctuations to be used.</p><p>The option <code>adjustedFullWidthPunctuation</code> defines which full-width punctuations zhlint will treat them as half-width punctuations when processing the further spaces issues around them. Usually it&#39;s just about quotes since the full-width quotes in morder Chinese fonts actually are only rendered in half-width.</p><p><strong>For spaces</strong></p><ul><li><code>spaceOutsideCode</code><ul><li>Type: <code>true | false | undefined</code></li><li>Default: <code>true</code></li><li>Examples: <ul><li><code>xxx \`foo\` xxx</code></li><li><code>xxx &lt;code&gt;foo&lt;/code&gt; xxx</code></li></ul></li><li>Values: <ul><li><code>true</code>: keep one space outside (default)</li><li><code>false</code>: no space outside</li><li><code>undefined</code>: do nothing, just keep the original format</li></ul></li></ul></li></ul><p>Determine whether to keep a space outside code x content.</p><ul><li><code>spaceBetweenHalfWidthLetters: true | undefined = true</code></li><li><code>noSpaceBetweenFullWidthLetters: true | undefined = true</code></li><li><code>spaceBetweenMixedWidthLetters: true | false | undefined = true</code></li></ul><p>Determine spaces between letters (half-width x half-width, full-width x full-width, half-width x full-width).</p><ul><li><code>noSpaceBeforePunctuation: true | undefined = true</code></li><li><code>spaceAfterHalfWidthPunctuation: true | undefined = true</code></li><li><code>noSpaceAfterFullWidthPunctuation: true | undefined = true</code></li></ul><p>Determine spaces between letters and punctuations.</p><ul><li><code>noSpaceInsideQuote: true | undefined = true</code></li><li><code>spaceOutsideHalfQuote: true | false | undefined = true</code></li><li><code>noSpaceOutsideFullQuote: true | undefined = true</code></li><li><code>noSpaceInsideBracket: true | undefined = true</code></li><li><code>spaceOutsideHalfBracket: true | false | undefined = true</code></li><li><code>nospaceOutsideFullBracket: true | undefined = true</code></li></ul><p>Determine spaces besides quotes and brackets.</p><p><strong>For special cases</strong></p><ul><li><code>skipZhUnits</code><ul><li>Type: <code>string?</code></li><li>Default: <code>\u5E74\u6708\u65E5\u5929\u53F7\u65F6\u5206\u79D2</code></li><li>This rule is used to skip/revert changes of spaces between numbers and Chinese units.</li></ul></li><li><code>skipAbbrs</code><ul><li>Type: <code>string[]?</code></li><li>Default: <code>[&#39;Mr.&#39;, &#39;Mrs.&#39;, &#39;Dr.&#39;, &#39;Jr.&#39;, &#39;Sr.&#39;, &#39;vs.&#39;, &#39;etc.&#39;, &#39;i.e.&#39;, &#39;e.g.&#39;, &#39;a.k.a.&#39;]</code></li><li>This rule is used to skip/revert changes of dots as abbreviations.</li></ul></li></ul><p><strong>Other invisible special cases (potential options in the future)</strong></p><ul><li>Skip linebreaks as spaces.</li><li>Skip HTML entities like <code>&amp;xxx;</code> as punctuation x letters x punctuation.</li><li>Skip half-width punctuations between half-width letters without spaces like <code>1,000,000</code>, <code>what&#39;s up</code>, etc.</li><li>Skip successive multiple half-width punctuations like ellipsis.</li><li>Skip letters x wrappers x letters without spaces like <code>letter*s*</code>.</li><li>Skip successive right-half-bracket x left-half-bracket without spaces like <code>(a)(b)(c)</code>.</li><li>Skip bracket between half-width letters without spaces like <code>minute(s)</code>, <code>computed()</code>, etc.</li></ul><h3 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-hidden="true">#</a></h3><p>First of all, there are several types of rules:</p><ol><li>punctuation width/choices</li><li>space tweakings</li><li>special cases</li></ol><p><strong>For punctuation width/choices</strong></p><p>We achieve this via 2 rules:</p><ul><li><code>punctuation-width</code> for options <code>halfWidthPunctuation</code> and <code>fullWidthPunctuation</code></li><li><code>punctuation-unification</code> for option <code>unifiedPunctuation</code></li></ul><p><strong>For space tweakings</strong></p><p>First of all, there are some independent rules we can do ahead.</p><ul><li><code>space-trim</code> for option <code>trimSpace</code></li><li><code>space-wrapper</code> for option <code>noSpaceInsideWrapper</code></li></ul><p>For the else part, we can draw a table of token combinations to rules to guide the implementation:</p><table><thead><tr><th>Target</th><th>L</th><th>P</th><th>Qo</th><th>Qi</th><th>Bo</th><th>Bi</th><th>D</th><th>U</th></tr></thead><tbody><tr><td>L</td><td>1</td><td>2</td><td>(4)</td><td>(3)</td><td>(6)</td><td>(5)</td><td>7</td><td>-</td></tr><tr><td>P</td><td>2</td><td>2</td><td>2</td><td>(3)</td><td>2</td><td>(5)</td><td>2</td><td>-</td></tr><tr><td>Qo</td><td>4</td><td>2</td><td>4</td><td>(3)</td><td>(6)</td><td>(5)</td><td>4</td><td>-</td></tr><tr><td>Qi</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td></tr><tr><td>Bo</td><td>6</td><td>2</td><td>6</td><td>(3)</td><td>6</td><td>(5)</td><td>6</td><td>-</td></tr><tr><td>Bi</td><td>5</td><td>5</td><td>5</td><td>5</td><td>5</td><td>5</td><td>5</td><td>5</td></tr><tr><td>D</td><td>7</td><td>2</td><td>(4)</td><td>(3)</td><td>(6)</td><td>(5)</td><td>7</td><td>-</td></tr><tr><td>U</td><td>-</td><td>-</td><td>-</td><td>(3)</td><td>-</td><td>(5)</td><td>-</td><td>-</td></tr></tbody></table><p>Abbreviations for tokens</p><ul><li>L = letters</li><li>P = punctuations</li><li>Qo = quotes (outer)</li><li>Qi = quotes (inner)</li><li>Bo = brackets (outer)</li><li>Bi = brackets (inner)</li><li>D = code</li><li>U = unknown</li></ul><p>Abbreviations for token properties</p><ul><li>w = wrappers</li><li>-w = wrappers (right side)</li><li>w- = wrappers (left side)</li><li>-w- = wrappers (both sides)</li><li>s = spaces</li></ul><p>Abbreviations for rules</p><ol><li><code>space-letters</code></li><li><code>space-punctuations</code></li><li><code>space-quotes-inner</code></li><li><code>space-quotes-outer</code></li><li><code>space-brackets-inner</code></li><li><code>space-brackets-outer</code></li><li><code>space-code</code></li></ol><p><strong>For special cases</strong></p><p>Then for special cases, we put them into:</p><ul><li>abbrs <ul><li><code>case-abbrs</code> (new)</li></ul></li><li>Chinese units <ul><li><code>case-zh-unit</code> (new)</li></ul></li><li>linebreaks <ul><li><code>case-linebreak</code> (new)</li></ul></li><li>entities <ul><li><code>case-html-entity</code> (new)</li></ul></li><li><code>what&#39;s up</code><ul><li>both <code>punctuations-width</code> and <code>space-punctuations</code></li></ul></li><li><code>ellipsis...</code><ul><li>both <code>punctuations-width</code> and <code>space-punctuations</code></li></ul></li><li><code>letter*s*</code><ul><li><code>space-letters</code></li></ul></li><li><code>(a)(b)(c)</code><ul><li><code>space-brackets-*</code></li></ul></li><li><code>minute(s)</code><ul><li><code>space-brackets-*</code></li></ul></li></ul><h2 id="joining-and-returning" tabindex="-1">Joining and returning <a class="header-anchor" href="#joining-and-returning" aria-hidden="true">#</a></h2><p>After processing all the rules, it&#39;s time to join all the tokens back together as the result of a string.</p><ol><li>For each piece of <em>plain text content</em>, join the tokens together as a string. <ul><li>During this process, we read all the <code>modified</code> content and spaces instead of their original ones, except the token is under ignored scope.</li></ul></li><li>Embed those strings back into the <em>slots</em> and generate the final output as a string. <ul><li>Besides the generated string, it also returns the original string and all the validation results for further usage.</li></ul></li></ol><h2 id="reports" tabindex="-1">Reports <a class="header-anchor" href="#reports" aria-hidden="true">#</a></h2><p>After getting the validation results, we can print them out for reports.</p><p>The type def of the validation result:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Result</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the basic info and availability of the file</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">file</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">disabled</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the original content of the file</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">origin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// all the error messages</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">validations</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Validation</span><span style="color:#A6ACCD;">[]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Validation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the type and content of message</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// position of the token</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">index</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">length</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// which part of the token the error comes from</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ValidationTarget</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ValidationTarget</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the main content</span></span>
<span class="line"><span style="color:#A6ACCD;">  CONTENT</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the space after the content</span></span>
<span class="line"><span style="color:#A6ACCD;">  SPACE_AFTER</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// for quotes, the left/right quote</span></span>
<span class="line"><span style="color:#A6ACCD;">  START_CONTENT</span></span>
<span class="line"><span style="color:#A6ACCD;">  END_CONTENT</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// for quotes, space after the left quote</span></span>
<span class="line"><span style="color:#A6ACCD;">  INNER_SPACE_BEFORE</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>The exported <code>report</code> function will analysze the results and print them out in terminal properly, including:</p><ul><li>calculate the line and column of the token</li><li>point the error position out with a caret marker below</li><li>count the total number of errors</li><li>using colored output in terminal if possible</li></ul><h2 id="for-dev" tabindex="-1">For dev <a class="header-anchor" href="#for-dev" aria-hidden="true">#</a></h2><p>In the source code, there is a <code>globalThis.__DEV__</code> variable which can be used to detect whether it&#39;s in the dev/debug mode. In this mode, the default output will go to:</p><ul><li><code>./stdout.log</code></li><li><code>./stderr.log</code></li></ul>`,89),a=[n];function i(r,c,d,p,u,h){return t(),s("div",null,a)}var g=e(o,[["render",i]]);export{f as __pageData,g as default};
